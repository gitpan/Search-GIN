[DZ] beginning to build Search-GIN
[DZ] guessing dist's main_module is lib/Search/GIN.pm
[DZ] extracting distribution abstract from lib/Search/GIN.pm
[@Basic/ExtraTests] rewriting release test xt/release/pod-syntax.t
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                   requires => bless({
                                     requirements => {
                                       "ExtUtils::MakeMaker" => bless({
                                         minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                       }, "Version::Requirements::_Range::Range"),
                                     },
                                   }, "Version::Requirements"),
                                 },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Test::More 'no_plan';\nuse Test::TempDir;\n\nuse Set::Object;\n\n{\n    # this will be a default class, for now I'm keeping them separate\n    package MyGIN;\n    use Moose;\n\n    # in memory index:\n    #with qw(\n    #   Search::GIN::DelegateToIndexed\n    #   Search::GIN::Driver::Hash\n    #);\n\n    # on disk index:\n    with (\n        qw(\n            Search::GIN::Core\n            Search::GIN::Driver::Hash\n            Search::GIN::SelfIDs\n\t\t),\n\t\t'Search::GIN::DelegateToIndexed' => {\n\t\t\texcludes => \"objects_to_ids\", # SelfIDs\n\t\t},\n    );\n}\n\n{\n    # you create the query objects, the GIN implementation uses them\n    # consistently with the index\n    package MyTagQuery;\n    use Moose::Role;\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Query);\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce   => 1,\n        required => 1,\n    );\n\n    sub extract_values {\n        my \$self = shift;\n        return (\n            values => [ \$self->tags->members ],\n        );\n    }\n}\n{\n    package MyTagQuery::Intersection;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->subset(\$item->tags);\n    }\n\n    around extract_values => sub {\n        my ( \$next, \$self, \@args ) = \@_;\n        return (\n            method => \"all\",\n            \$self->\$next(\@args),\n        );\n    };\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    package MyTagQuery::Union;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->intersection(\$item->tags)->size >= 1;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    # this is an indexable object\n    package MyObject;\n    use Moose;\n\n    use overload '\"\"' => sub { \$_[0]->id }, fallback => 1; # is_deeply diagnosis\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Indexable);\n\n    has id => (\n        isa => \"Str\",\n        is  => \"ro\",\n    );\n\n    sub gin_id { shift->id }\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce  => 1,\n        default => sub { Set::Object->new },\n    );\n\n    sub gin_extract_values {\n        my \$self = shift;\n        \$self->tags->members;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n\n\nmy \$gin = MyGIN->new(\n    manager => {\n        home => temp_root,\n        create => 1,\n    },\n    file => \"foo.idx\",\n    distinct => 1,\n);\n\nmy \@objs = map { MyObject->new(%\$_) } (\n    {\n        id   => \"aaaaaaaaaaaaaaaa\",\n        tags => [ qw(foo bar baz donkey) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaab\",\n        tags => [ qw(bar gorch baz) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaac\",\n        tags => [ qw(zot urf donkey gorch) ],\n    },\n);\n\n\$gin->insert(\@objs);\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[0, 1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[1, 2] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs ] );\n}\n\n",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                                requires => bless({
                                                  requirements => {
                                                    "ExtUtils::MakeMaker" => bless({
                                                      minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                                    }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                                 runtime   => {
                                                requires => bless({
                                                  requirements => {
                                                    "Carp"                     => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Data::Stream::Bulk::Util" => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose"                    => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose::Role"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "MRO::Compat"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "namespace::clean"         => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scalar::Util"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scope::Guard"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Set::Object"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Test::Deep::NoTest"       => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Test::More 'no_plan';\nuse Test::TempDir;\n\nuse Set::Object;\n\n{\n    # this will be a default class, for now I'm keeping them separate\n    package MyGIN;\n    use Moose;\n\n    # in memory index:\n    #with qw(\n    #   Search::GIN::DelegateToIndexed\n    #   Search::GIN::Driver::Hash\n    #);\n\n    # on disk index:\n    with (\n        qw(\n            Search::GIN::Core\n            Search::GIN::Driver::Hash\n            Search::GIN::SelfIDs\n\t\t),\n\t\t'Search::GIN::DelegateToIndexed' => {\n\t\t\texcludes => \"objects_to_ids\", # SelfIDs\n\t\t},\n    );\n}\n\n{\n    # you create the query objects, the GIN implementation uses them\n    # consistently with the index\n    package MyTagQuery;\n    use Moose::Role;\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Query);\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce   => 1,\n        required => 1,\n    );\n\n    sub extract_values {\n        my \$self = shift;\n        return (\n            values => [ \$self->tags->members ],\n        );\n    }\n}\n{\n    package MyTagQuery::Intersection;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->subset(\$item->tags);\n    }\n\n    around extract_values => sub {\n        my ( \$next, \$self, \@args ) = \@_;\n        return (\n            method => \"all\",\n            \$self->\$next(\@args),\n        );\n    };\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    package MyTagQuery::Union;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->intersection(\$item->tags)->size >= 1;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    # this is an indexable object\n    package MyObject;\n    use Moose;\n\n    use overload '\"\"' => sub { \$_[0]->id }, fallback => 1; # is_deeply diagnosis\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Indexable);\n\n    has id => (\n        isa => \"Str\",\n        is  => \"ro\",\n    );\n\n    sub gin_id { shift->id }\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce  => 1,\n        default => sub { Set::Object->new },\n    );\n\n    sub gin_extract_values {\n        my \$self = shift;\n        \$self->tags->members;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n\n\nmy \$gin = MyGIN->new(\n    manager => {\n        home => temp_root,\n        create => 1,\n    },\n    file => \"foo.idx\",\n    distinct => 1,\n);\n\nmy \@objs = map { MyObject->new(%\$_) } (\n    {\n        id   => \"aaaaaaaaaaaaaaaa\",\n        tags => [ qw(foo bar baz donkey) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaab\",\n        tags => [ qw(bar gorch baz) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaac\",\n        tags => [ qw(zot urf donkey gorch) ],\n    },\n);\n\n\$gin->insert(\@objs);\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[0, 1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[1, 2] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs ] );\n}\n\n",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                                requires => bless({
                                                  requirements => {
                                                    "ExtUtils::MakeMaker" => bless({
                                                      minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                                    }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                                 runtime   => {
                                                requires => bless({
                                                  requirements => {
                                                    "Carp"                     => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Data::Stream::Bulk::Util" => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose"                    => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose::Role"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "MRO::Compat"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "namespace::clean"         => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scalar::Util"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scope::Guard"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Set::Object"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Test::Deep::NoTest"       => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Test::More 'no_plan';\nuse Test::TempDir;\n\nuse Set::Object;\n\n{\n    # this will be a default class, for now I'm keeping them separate\n    package MyGIN;\n    use Moose;\n\n    # in memory index:\n    #with qw(\n    #   Search::GIN::DelegateToIndexed\n    #   Search::GIN::Driver::Hash\n    #);\n\n    # on disk index:\n    with (\n        qw(\n            Search::GIN::Core\n            Search::GIN::Driver::Hash\n            Search::GIN::SelfIDs\n\t\t),\n\t\t'Search::GIN::DelegateToIndexed' => {\n\t\t\texcludes => \"objects_to_ids\", # SelfIDs\n\t\t},\n    );\n}\n\n{\n    # you create the query objects, the GIN implementation uses them\n    # consistently with the index\n    package MyTagQuery;\n    use Moose::Role;\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Query);\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce   => 1,\n        required => 1,\n    );\n\n    sub extract_values {\n        my \$self = shift;\n        return (\n            values => [ \$self->tags->members ],\n        );\n    }\n}\n{\n    package MyTagQuery::Intersection;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->subset(\$item->tags);\n    }\n\n    around extract_values => sub {\n        my ( \$next, \$self, \@args ) = \@_;\n        return (\n            method => \"all\",\n            \$self->\$next(\@args),\n        );\n    };\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    package MyTagQuery::Union;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->intersection(\$item->tags)->size >= 1;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    # this is an indexable object\n    package MyObject;\n    use Moose;\n\n    use overload '\"\"' => sub { \$_[0]->id }, fallback => 1; # is_deeply diagnosis\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Indexable);\n\n    has id => (\n        isa => \"Str\",\n        is  => \"ro\",\n    );\n\n    sub gin_id { shift->id }\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce  => 1,\n        default => sub { Set::Object->new },\n    );\n\n    sub gin_extract_values {\n        my \$self = shift;\n        \$self->tags->members;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n\n\nmy \$gin = MyGIN->new(\n    manager => {\n        home => temp_root,\n        create => 1,\n    },\n    file => \"foo.idx\",\n    distinct => 1,\n);\n\nmy \@objs = map { MyObject->new(%\$_) } (\n    {\n        id   => \"aaaaaaaaaaaaaaaa\",\n        tags => [ qw(foo bar baz donkey) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaab\",\n        tags => [ qw(bar gorch baz) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaac\",\n        tags => [ qw(zot urf donkey gorch) ],\n    },\n);\n\n\$gin->insert(\@objs);\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[0, 1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[1, 2] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs ] );\n}\n\n",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                                requires => bless({
                                                  requirements => {
                                                    "ExtUtils::MakeMaker" => bless({
                                                      minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                                    }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                                 runtime   => {
                                                requires => bless({
                                                  requirements => {
                                                    "Carp"                     => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Data::Stream::Bulk::Util" => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose"                    => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose::Role"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "MRO::Compat"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "namespace::clean"         => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scalar::Util"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scope::Guard"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Set::Object"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Test::Deep::NoTest"       => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
do {
  my $a = bless({
    finder => [":InstallModules", ":ExecFiles"],
    logger => bless({
      debug => undef,
      logger => bless({
        debug => 0,
        dispatcher => bless({
          callbacks => [sub { ... }],
          outputs   => {
                         stdout => bless({
                           callbacks     => [sub { ... }],
                           level_names   => [
                                              "debug",
                                              "info",
                                              "notice",
                                              "warning",
                                              "error",
                                              "critical",
                                              "alert",
                                              "emergency",
                                            ],
                           level_numbers => {
                                              alert     => 6,
                                              crit      => 5,
                                              critical  => 5,
                                              debug     => 0,
                                              emerg     => 7,
                                              emergency => 7,
                                              err       => 4,
                                              error     => 4,
                                              info      => 1,
                                              notice    => 2,
                                              warn      => 3,
                                              warning   => 3,
                                            },
                           max_level     => 1,
                           min_level     => 0,
                           name          => "stdout",
                           stderr        => 0,
                         }, "Log::Dispatch::Screen"),
                       },
        }, "Log::Dispatch"),
        fail_fatal => 1,
        prefix => undef,
      }, "Log::Dispatchouli"),
      parent => 'fix',
      proxy_prefix => "[AutoPrereq] ",
    }, "Log::Dispatchouli::Proxy"),
    plugin_name => "AutoPrereq",
    test_finder => [":TestFiles"],
    zilla => bless({
      _global_stashes   => {
                             "%PAUSE"  => bless({ password => "h0Ly5HiT", username => "XSAWYERX" }, "Dist::Zilla::Stash::PAUSE"),
                             "%Rights" => bless({ copyright_holder => "Sawyer X", license_class => "Perl_5" }, "Dist::Zilla::Stash::Rights"),
                             "%User"   => bless({ email => "xsawyerx\@cpan.org", name => "Sawyer X" }, "Dist::Zilla::Stash::User"),
                           },
      _share_dir_map    => {},
      _version_override => "0.05",
      abstract          => "Generalized Inverted Indexing",
      authors           => ["Yuval Kogman <nothingmuch\@cpan.org>"],
      chrome            => bless({ logger => 'fix' }, "Dist::Zilla::Chrome::Term"),
      files             => [
                             bless({
                               _original_name => "Changes",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "Changes",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "output.log",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "output.log",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "dist.ini",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "dist.ini",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/attrs.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/attrs.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/core.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Test::More 'no_plan';\nuse Test::TempDir;\n\nuse Set::Object;\n\n{\n    # this will be a default class, for now I'm keeping them separate\n    package MyGIN;\n    use Moose;\n\n    # in memory index:\n    #with qw(\n    #   Search::GIN::DelegateToIndexed\n    #   Search::GIN::Driver::Hash\n    #);\n\n    # on disk index:\n    with (\n        qw(\n            Search::GIN::Core\n            Search::GIN::Driver::Hash\n            Search::GIN::SelfIDs\n\t\t),\n\t\t'Search::GIN::DelegateToIndexed' => {\n\t\t\texcludes => \"objects_to_ids\", # SelfIDs\n\t\t},\n    );\n}\n\n{\n    # you create the query objects, the GIN implementation uses them\n    # consistently with the index\n    package MyTagQuery;\n    use Moose::Role;\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Query);\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce   => 1,\n        required => 1,\n    );\n\n    sub extract_values {\n        my \$self = shift;\n        return (\n            values => [ \$self->tags->members ],\n        );\n    }\n}\n{\n    package MyTagQuery::Intersection;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->subset(\$item->tags);\n    }\n\n    around extract_values => sub {\n        my ( \$next, \$self, \@args ) = \@_;\n        return (\n            method => \"all\",\n            \$self->\$next(\@args),\n        );\n    };\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    package MyTagQuery::Union;\n    use Moose;\n\n    with qw(MyTagQuery);\n\n    sub consistent {\n        my ( \$self, \$index, \$item ) = \@_;\n        return \$self->tags->intersection(\$item->tags)->size >= 1;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n{\n    # this is an indexable object\n    package MyObject;\n    use Moose;\n\n    use overload '\"\"' => sub { \$_[0]->id }, fallback => 1; # is_deeply diagnosis\n\n    use MooseX::Types::Set::Object;\n\n    with qw(Search::GIN::Indexable);\n\n    has id => (\n        isa => \"Str\",\n        is  => \"ro\",\n    );\n\n    sub gin_id { shift->id }\n\n    has tags => (\n        isa => \"Set::Object\",\n        is  => \"ro\",\n        coerce  => 1,\n        default => sub { Set::Object->new },\n    );\n\n    sub gin_extract_values {\n        my \$self = shift;\n        \$self->tags->members;\n    }\n\n    __PACKAGE__->meta->make_immutable;\n}\n\n\nmy \$gin = MyGIN->new(\n    manager => {\n        home => temp_root,\n        create => 1,\n    },\n    file => \"foo.idx\",\n    distinct => 1,\n);\n\nmy \@objs = map { MyObject->new(%\$_) } (\n    {\n        id   => \"aaaaaaaaaaaaaaaa\",\n        tags => [ qw(foo bar baz donkey) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaab\",\n        tags => [ qw(bar gorch baz) ],\n    },\n    {\n        id   => \"aaaaaaaaaaaaaaac\",\n        tags => [ qw(zot urf donkey gorch) ],\n    },\n);\n\n\$gin->insert(\@objs);\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(foo)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[0] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[0, 1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[1, 2] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Intersection->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n\n{\n    my \@res = \$gin->query( MyTagQuery::Union->new( tags => [qw(bar gorch)] ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs ] );\n}\n\n",
                               mode => 420,
                               name => "t/core.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/rels.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/rels.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/class.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Test::More 'no_plan';\n\nuse ok 'Search::GIN::Query::Class';\nuse ok 'Search::GIN::Extract::Class';\nuse ok 'Search::GIN::Query::Manual';\n\n{\n    package MyGIN;\n    use Moose;\n\n    with (\n        qw(\n            Search::GIN::Core\n            Search::GIN::Driver::Hash\n            Search::GIN::SelfIDs\n            Search::GIN::Extract::Delegate\n        ),\n    );\n\n    __PACKAGE__->meta->make_immutable;\n\n    # this is an indexable object\n    package Base;\n    use Moose;\n\n    __PACKAGE__->meta->make_immutable;\n\n    package Foo;\n    use Moose;\n\n    extends qw(Base);\n\n    __PACKAGE__->meta->make_immutable;\n\n    package Bar;\n    use Moose;\n\n    extends qw(Base);\n\n    __PACKAGE__->meta->make_immutable;\n\n    package Gorch;\n    use Moose;\n\n    extends qw(Bar);\n\n    __PACKAGE__->meta->make_immutable;\n}\n\n\nmy \$gin = MyGIN->new( extract => Search::GIN::Extract::Class->new );\n\nmy \@objs = (\n    Base->new,\n    Foo->new,\n    Bar->new,\n    Bar->new,\n    Gorch->new,\n);\n\n\$gin->insert(\@objs);\n\n{\n    my \@res = \$gin->query( Search::GIN::Query::Class->new( class => \"Base\" ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs ] );\n}\n\n{\n    my \@res = \$gin->query( Search::GIN::Query::Class->new( class => \"Foo\" ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n\n{\n    my \@res = \$gin->query( Search::GIN::Query::Class->new( class => \"Bar\" ) )->all;\n    is_deeply( [ sort \@res ], [ sort \@objs[2, 3, 4] ] );\n}\n\n\n{\n    my \@res = \$gin->query( Search::GIN::Query::Manual->new( values => { class => \"Foo\" } ) )->all;\n    is_deeply( [ \@res ], [ \$objs[1] ] );\n}\n",
                               mode => 420,
                               name => "t/class.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "t/key_expansion.t",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               mode => 420,
                               name => "t/key_expansion.t",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN;\nBEGIN {\n  \$Search::GIN::VERSION = '0.05';\n}\n# ABSTRACT: Generalized Inverted Indexing\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN - Generalized Inverted Indexing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nInverted Indexing is an indexing method that maps from content to location in\nstorage.\n\nGeneralized Inverted Indexing (GIN, for short) is an inverted indexing method\nin which the index is unaware of what data exactly is it indexing.\n\nL<Search::GIN> is primarily used by L<KiokuDB> for custom indexing.\n\n=head1 SEE ALSO\n\n=over 4\n\n=item * L<pgsql-hackers msg #00960|http://archives.postgresql.org/pgsql-hackers/\n2006-04/msg00960.php>\n\n=item * L<Inverted_index on Wikipedia|http://en.wikipedia.org/wiki/\nInverted_index>\n\n=back\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver;\nBEGIN {\n  \$Search::GIN::Driver::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk nil cat unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    insert_entry\n    remove_ids\n    fetch_entry\n);\n\nsub fetch_entry_streams {\n    my ( \$self, %args ) = \@_;\n    map { \$self->fetch_entry(\$_) } \@{ \$args{values} };\n}\n\nsub fetch_entries {\n    my ( \$self, %args ) = \@_;\n\n    my \$method = \"fetch_entries_\" . ( \$args{method} || \"any\" );\n\n    \$self->\$method(%args);\n}\n\nsub fetch_entries_any {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n\n    my \$res = cat(splice \@streams); # splice disposes of \@streams ASAP, keeping memory utilization down\n\n    if ( \$res->loaded ) {\n        # if all results are already ready, we can uniqify them to avoid\n        # duplicate calls to ->consistent\n        return unique(\$res);\n    } else {\n        return \$res;\n    }\n}\n\nsub fetch_entries_all {\n    my ( \$self, \@args ) = \@_;\n\n    my \@streams = \$self->fetch_entry_streams(\@args);\n\n    return nil unless \@streams;\n    return \$streams[0] if \@streams == 1;\n\n    foreach my \$stream ( \@streams ) {\n        return cat(splice \@streams) unless \$stream->loaded;\n    }\n\n    # if we made it to here then we have a > 1 list of fully realized streams\n    # we can compute the intersection of the IDs to avoid unnecessary calls to\n    # ->consistent\n\n    # If all streams are known to be sorted this method could be overridden to\n    # use merge sorting\n\n    my \$last = shift \@streams;\n    my \$n = scalar \@streams;\n\n    # compute intersection\n    my %seen;\n    foreach my \$stream ( splice \@streams ) {\n        ++\$seen{\$_} for \$stream->all;\n    }\n\n    no warnings 'uninitialized'; # == with undef\n    return bulk( grep { \$seen{\$_} == \$n } \$last->all );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys;\nBEGIN {\n  \$Search::GIN::Keys::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nrequires qw(process_keys);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query;\nBEGIN {\n  \$Search::GIN::Query::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nrequires qw(\n    consistent\n    extract_values\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract;\nBEGIN {\n  \$Search::GIN::Extract::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires 'extract_values';\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/SelfIDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::SelfIDs;\nBEGIN {\n  \$Search::GIN::SelfIDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => [qw(meta)];\n\nsub ids_to_objects {\n    my ( \$self, \@ids ) = \@_;\n    return \@ids;\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    return \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::SelfIDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::SelfIDs;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/SelfIDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Core.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Core;\nBEGIN {\n  \$Search::GIN::Core::VERSION = '0.05';\n}\n# ABSTRACT: Core of Search::GIN\n\nuse Moose::Role;\n\nuse Data::Stream::Bulk::Util qw(bulk unique);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Driver\n    Search::GIN::Extract\n);\n\nrequires qw(\n    objects_to_ids\n    ids_to_objects\n);\n\nhas distinct => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0, # FIXME what should the default be?\n);\n\nsub query {\n    my ( \$self, \$query, \@args ) = \@_;\n\n    my %args = (\n        distinct => \$self->distinct,\n        \@args,\n    );\n\n    my \@spec = \$query->extract_values(\$self);\n\n    my \$ids = \$self->fetch_entries(\@spec);\n\n    \$ids = unique(\$ids) if \$args{distinct};\n\n    return \$ids->filter(sub { [ grep { \$query->consistent(\$self, \$_) } \$self->ids_to_objects(\@\$_) ] });\n}\n\nsub remove {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    \$self->remove_ids(\@ids);\n}\n\nsub insert {\n    my ( \$self, \@items ) = \@_;\n\n    my \@ids = \$self->objects_to_ids(\@items);\n\n    my \@entries;\n\n    foreach my \$item ( \@items ) {\n        my \@keys = \$self->extract_values( \$item, gin => \$self );\n        my \$id = shift \@ids;\n\n        \$self->insert_entry( \$id, \@keys );\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Core - Core of Search::GIN\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Core.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/DelegateToIndexed.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::DelegateToIndexed;\nBEGIN {\n  \$Search::GIN::DelegateToIndexed::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Core);\n\nrequires \"ids_to_objects\";\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_extract_values(\$self, \@args);\n}\n\nsub compare_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n    \$obj->gin_compare_values(\$self, \@args);\n}\n\nsub objects_to_ids {\n    my ( \$self, \@objs ) = \@_;\n    map { \$_->gin_id } \@objs;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::DelegateToIndexed - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::DelegateToIndexed;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/DelegateToIndexed.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Indexable.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Indexable;\nBEGIN {\n  \$Search::GIN::Indexable::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nrequires 'gin_extract_values';\n\nsub gin_id {\n    my \$self = shift;\n    return \$self;\n}\n\nsub gin_compare_values {\n    my ( \$self, \$one, \$two ) = \@_;\n    \$one cmp \$two;\n}\n\nsub gin_consistent {\n    my ( \$self, \$index, \$query, \@args ) = \@_;\n    \$query->gin_consistent(\$index, \$self, \@args);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Indexable - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Indexable;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Indexable.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Callbacks.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Callbacks;\nBEGIN {\n  \$Search::GIN::Callbacks::VERSION = '0.05';\n}\n# ABSTRACT: Provide callbacks\n\nuse Moose::Role;\n\nwith qw(Search::GIN::Core);\n\nforeach my \$cb qw(objects_to_ids extract_values extract_query compare_values consistent ids_to_objects) {\n    has \"\${cb}_callback\" => (\n        isa => \"CodeRef\",\n        is  => \"rw\",\n        required => 1,\n    );\n\n    eval \"sub \$cb { \\\$self->\${cb}_callback->(\@_) }\";\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Callbacks - Provide callbacks\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 DESCRIPTION\n\nThis role provides a few callbacks for L<Search::GIN>.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Callbacks.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Multiplex.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Multiplex;\nBEGIN {\n  \$Search::GIN::Extract::Multiplex::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(Search::GIN::Extract);\n\nhas extractors => (\n    isa => \"ArrayRef[Search::GIN::Extract]\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    return map { \$_->extract_values(\$obj, \@args) } \@{ \$self->extractors };\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Multiplex - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Multiplex;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Multiplex.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Callback.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Callback;\nBEGIN {\n  \$Search::GIN::Extract::Callback::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas extract => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n    required => 1,\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$extract = \$self->extract;\n\n    \$self->process_keys( \$obj->\$extract(\$self, \@args) );\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Callback - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Callback;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Callback.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Attributes;\nBEGIN {\n  \$Search::GIN::Extract::Attributes::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"ArrayRef[Str]\",\n    is  => \"rw\",\n    predicate => \"has_attributes\",\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \@meta_attrs = \$self->get_meta_attrs(\$obj, \@args);\n\n    return \$self->process_keys({ map {\n                                    my \$val = \$_->get_value(\$obj);\n                                    \$_->name => (defined(\$val) ? \$val : undef);\n                                } \@meta_attrs });\n}\n\nsub get_meta_attrs {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    if ( \$self->has_attributes ) {\n        return grep { defined } map { \$meta->find_attribute_by_name(\$_) } \@{ \$self->attributes };\n    } else {\n        return \$meta->get_all_attributes;\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Attributes - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Attributes;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Delegate.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Delegate;\nBEGIN {\n  \$Search::GIN::Extract::Delegate::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nhas extract => (\n    does => \"Search::GIN::Extract\",\n    is   => \"ro\",\n    required => 1,\n    # handles => \"Search::GIN::Extract\"\n);\n\nsub extract_values { shift->extract->extract_values(\@_) }\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Delegate - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Delegate.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Extract/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Extract::Class;\nBEGIN {\n  \$Search::GIN::Extract::Class::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose;\nuse MRO::Compat;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Extract\n    Search::GIN::Keys::Deep\n);\n\nsub extract_values {\n    my ( \$self, \$obj, \@args ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$isa = \$class->mro::get_linear_isa();\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n    my \@roles = \$meta && \$meta->can(\"calculate_all_roles\") ? ( map { \$_->name } \$meta->calculate_all_roles ) : ();\n\n    return \$self->process_keys({\n        blessed => \$class,\n        class   => \$isa,\n        does    => \\\@roles,\n    });\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Extract::Class - use Moose;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Extract::Class;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Extract/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Attributes.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Attributes;\nBEGIN {\n  \$Search::GIN::Query::Attributes::VERSION = '0.05';\n}\n# ABSTRACT: Create attributes-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas attributes => (\n    isa => \"HashRef\",\n    is  => \"rw\",\n    required => 1,\n);\n\nhas compare => (\n    isa => \"Str|CodeRef\",\n    is  => \"rw\",\n    default => \"compare_naive\",\n);\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys(\$self->attributes) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$obj ) = \@_;\n\n    my \$class = ref \$obj;\n\n    my \$meta = Class::MOP::get_metaclass_by_name(\$class);\n\n    my \$query = \$self->attributes;\n\n    my %got;\n\n    foreach my \$attr_name ( keys %\$query ) {\n        my \$expected = \$query->{\$attr_name};\n\n        my \$meta_attr = \$meta->find_attribute_by_name(\$attr_name) || return;\n        \$got{\$attr_name} = \$meta_attr->get_value(\$obj);\n    }\n\n    my \$cmp = \$self->compare;\n\n    return \$self->\$cmp( \\%got, \$query );\n}\n\nsub compare_naive {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    return unless keys %\$got == keys %\$exp;\n\n    foreach my \$key ( keys %\$exp ) {\n        return unless overload::StrVal(\$got->{\$key}) eq overload::StrVal(\$exp->{\$key});\n    }\n\n    return 1;\n}\n\nsub compare_test_deep {\n    my ( \$self, \$got, \$exp ) = \@_;\n\n    require Test::Deep::NoTest;\n    Test::Deep::NoTest::eq_deeply(\$got, \$exp);\n}\n\n# FIXME Data::Compare too\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Attributes - Create attributes-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Attributes;\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n        },\n    );\n\n=head1 DESCRIPTION\n\nCreates an attributes-based GIN query that can be used to search records in a\nstorage.\n\nThis is a ready-to-use query that uses an object's attributes to search through\nthe storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 attributes\n\nAttributes of the object you want to find.\n\n    my \$query = Search::GIN::Query::Attributes->new(\n        attributes => {\n            name => 'Homer',\n            city => 'Springfield',\n        },\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Attributes.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Manual.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Manual;\nBEGIN {\n  \$Search::GIN::Query::Manual::VERSION = '0.05';\n}\n# ABSTRACT: Create manual GIN queries\n\nuse Moose;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas method => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_method\",\n);\n\nhas values => (\n    isa => \"Any\",\n    is  => \"ro\",\n    required => 1,\n);\n\nhas _processed => (\n    is => \"ro\",\n    lazy_build => 1,\n);\n\nhas filter => (\n    isa => \"CodeRef|Str\",\n    is  => \"ro\",\n);\n\nsub _build__processed {\n    my \$self = shift;\n    return [ \$self->process_keys( \$self->values ) ];\n}\n\nsub extract_values {\n    my \$self  = shift;\n    my \$EMPTY = q{};\n\n    return (\n        values => \$self->_processed,\n        method => \$self->has_method ? \$self->method : \$EMPTY,\n    );\n}\n\nsub consistent {\n    my ( \$self, \$obj ) = \@_;\n\n    if ( my \$filter = \$self->filter ) {\n        return \$obj->\$filter;\n    } else {\n        return 1;\n    }\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Manual - Create manual GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Manual;\n\n    my \$query = Search::GIN::Query::Manual->new(\n        values => {\n            name => 'Homer',\n        }\n    );\n\n=head1 DESCRIPTION\n\nCreates a manual GIN query that can be used to search records in a storage.\n\nUnlike the stock GIN queries (L<Search::GIN::Query::Class>,\nL<Search::GIN::Query::Attributes>), with this object you define your search\nmanually, allowing you to create any search you want.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 values\n\nThe keys and values to build the query for.\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Manual.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Query/Class.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Query::Class;\nBEGIN {\n  \$Search::GIN::Query::Class::VERSION = '0.05';\n}\n# ABSTRACT: Create class-based GIN queries\n\nuse Moose;\nuse Carp qw(croak);\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(\n    Search::GIN::Query\n    Search::GIN::Keys::Deep\n);\n\nhas no_check => (\n    isa => \"Bool\",\n    is  => \"rw\",\n    default => 0,\n);\n\nhas class => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_class\",\n);\n\nhas does => (\n    isa => \"ArrayRef | Str\",\n    is  => \"ro\",\n    predicate => \"has_does\",\n);\n\nhas blessed => (\n    isa => \"Str\",\n    is  => \"ro\",\n    predicate => \"has_blessed\",\n);\n\nsub BUILD {\n    my \$self = shift;\n\n    croak \"One of 'class', 'does', or 'blessed' is required\"\n        unless \$self->has_class or \$self->has_does or \$self->has_blessed;\n}\n\nsub extract_values {\n    my \$self = shift;\n\n    return (\n        method => \"all\",\n        values => [ \$self->process_keys({\n            ( \$self->has_class   ? ( class   => \$self->class   ) : () ),\n            ( \$self->has_does    ? ( does    => \$self->does    ) : () ),\n            ( \$self->has_blessed ? ( blessed => \$self->blessed ) : () ),\n        }) ],\n    );\n}\n\nsub consistent {\n    my ( \$self, \$index, \$object ) = \@_;\n\n    return 1 if \$self->no_check;\n\n    if ( \$self->has_blessed ) {\n        return unless ref(\$object) eq \$self->blessed;\n    }\n\n    if ( \$self->has_class ) {\n        return unless \$self->check_object(\$object, isa => \$self->class);\n    }\n\n    if ( \$self->has_does ) {\n        return unless \$self->check_object(\$object, DOES => \$self->does);\n    }\n\n    return 1;\n}\n\nsub check_object {\n    my ( \$self, \$object, \$check, \$classes ) = \@_;\n\n    my \@classes = ref(\$classes) ? \@\$classes : \$classes;\n\n    foreach my \$class ( \@classes ) {\n        \$object->\$check(\$class) or return;\n    }\n\n    return 1;\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Query::Class - Create class-based GIN queries\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Query::Class;\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head1 DESCRIPTION\n\nCreates a class-based GIN query that can be used to search records in a storage.\n\nThis is a ready-to-use query that uses class definitions (specifically C<class>,\nC<does> and C<blessed>) to search through the storage.\n\n=head1 METHODS/SUBROUTINES\n\n=head2 new\n\nCreates a new query.\n\n=head1 ATTRIBUTES\n\n=head2 class\n\nThe class of the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        class => 'Person',\n    );\n\n=head2 does\n\nA role consumed by the object you want to find.\n\n    my \$query = Search::GIN::Query::Class->new(\n        does => 'TheMonkey',\n    );\n\n=head2 blessed\n\nThe name of the package that the object is blessed into.\n\n    my \$query = Search::GIN::Query::Class->new(\n        blessed => 'Person',\n    );\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Query/Class.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Join.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Join;\nBEGIN {\n  \$Search::GIN::Keys::Join::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nsub join_keys {\n    my ( \$self, \@keys ) = \@_;\n    map { \$self->join_key(\$_) } \@keys;\n}\n\nsub join_key {\n    my ( \$self, \@key ) = \@_;\n    no warnings 'uninitialized';\n    join \":\", map { ref(\$_) ? \@\$_ : \$_ } \@key;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Join - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Join.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Deep.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Deep;\nBEGIN {\n  \$Search::GIN::Keys::Deep::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse namespace::clean -except => 'meta';\n\nwith qw(\n    Search::GIN::Keys\n    Search::GIN::Keys::Join\n    Search::GIN::Keys::Expand\n);\n\nsub process_keys {\n    my ( \$self, \@keys ) = \@_;\n\n    \$self->join_keys( \$self->expand_keys(\@keys) );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Deep - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\twith qw(Search::GIN::Keys::Deep);\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Deep.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Keys/Expand.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Keys::Expand;\nBEGIN {\n  \$Search::GIN::Keys::Expand::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\nuse Carp qw(croak);\nuse namespace::clean -except => 'meta';\n\nsub expand_keys {\n    my ( \$self, \@keys ) = \@_;\n    return map { \$self->expand_key(\$_) } \@keys;\n}\n\nsub expand_key {\n    my ( \$self, \$value, %args ) = \@_;\n\n    return \$self->expand_key_string(\$value) if not ref \$value;\n\n    my \$method = \"expand_keys_\" . lc ref(\$value);\n\n    croak(\"Don't know how to expand \$value in key\") if \$method =~ /::/ or not \$self->can(\$method);\n\n    return \$self->\$method(\$value);\n}\n\nsub expand_key_prepend {\n    my ( \$self, \$prefix, \@keys ) = \@_;\n    return map { [ \$prefix, \@\$_ ] } \@keys;\n}\n\nsub expand_key_string {\n    my ( \$self, \$str ) = \@_;\n    return [ \$str ];\n}\n\nsub expand_keys_array {\n    my ( \$self, \$array ) = \@_;\n    return map { \$self->expand_key(\$_) } \@\$array;\n}\n\nsub expand_keys_hash {\n    my ( \$self, \$hash ) = \@_;\n\n    return map {\n        \$self->expand_key_prepend(\n            \$_,\n            \$self->expand_key(\$hash->{\$_})\n        );\n    } keys %\$hash;\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Keys::Expand - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Keys/Expand.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/TXN.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::TXN;\nBEGIN {\n  \$Search::GIN::Driver::TXN::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Scope::Guard;\n\nuse Carp qw(croak);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nrequires qw(txn_begin txn_commit txn_rollback);\n\nhas current_transaction => (\n    isa => \"Any\",\n    is  => \"rw\",\n    writer => \"set_current_transaction\",\n    predicate => \"has_current_transaction\",\n    clearer => \"clear_current_transaction\",\n);\n\nsub txn_do {\n    my ( \$self, \$coderef ) = ( shift, shift );\n\n    ref \$coderef eq 'CODE' or croak '\$coderef must be a CODE reference';\n\n    my ( \$txn, \$scope_guard );\n\n    if ( \$self->has_current_transaction ) {\n        my \$prev = \$self->current_transaction;\n        \$txn = \$self->txn_begin(\$prev);\n        \$scope_guard = Scope::Guard->new(sub { \$self->set_current_transaction(\$prev) });\n    } else {\n        \$txn = \$self->txn_begin;\n        \$scope_guard = Scope::Guard->new(sub { \$self->clear_current_transaction() });\n    }\n\n    my \@result;\n    my \$want_array = wantarray;\n\n    my \$err = do {\n        local \$\@;\n        eval {\n            if ( \$want_array ) {\n                \@result = \$coderef->(\@_);\n            } elsif( defined \$want_array ) {\n                \$result[0] = \$coderef->(\@_);\n            } else {\n                \$coderef->(\@_);\n            }\n\n            \$self->txn_commit(\$txn);\n\n            1;\n        };\n\n        \$\@\n    };\n\n    if ( !\$err ) {\n        return \$want_array ? \@result : \$result[0];\n    } else {\n        my \$rollback_exception = do {\n            local \$\@;\n            eval { \$self->txn_rollback(\$txn) };\n            \$\@;\n        };\n\n        if (\$rollback_exception) {\n            croak \"Transaction aborted: \$err, rollback failed: \$rollback_exception\";\n        } else {\n            die \$err;\n        }\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::TXN - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::TXN;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/TXN.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack;\nBEGIN {\n  \$Search::GIN::Driver::Pack::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nwith qw(\n    Search::GIN::Driver::Pack::Values\n    Search::GIN::Driver::Pack::IDs\n);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Hash.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Hash;\nBEGIN {\n  \$Search::GIN::Driver::Hash::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse Set::Object;\n\nuse Data::Stream::Bulk::Util qw(bulk);\nuse Scalar::Util qw(refaddr);\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nhas values => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nhas objects => (\n    isa => \"HashRef\",\n    is  => \"ro\",\n    default => sub { {} },\n);\n\nsub clear {\n    my \$self = shift;\n\n    %{ \$self->values } = ();\n    %{ \$self->objects } = ();\n\n    return;\n}\n\nsub fetch_entry {\n    my ( \$self, \$key ) = \@_;\n\n    if ( my \$set = \$self->values->{\$key} ) {\n        return bulk(\$set->members);\n    } else {\n        return;\n    }\n}\n\nsub remove_ids {\n    my ( \$self, \@ids ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    my \@key_sets = grep { defined } delete \@{\$objects}{map { ref() ? refaddr(\$_) : \$_ } \@ids};\n    return unless \@key_sets;\n    my \$keys = (shift \@key_sets)->union(\@key_sets);\n\n    foreach my \$key ( \$keys->members ) {\n        my \$set = \$values->{\$key};\n        \$set->remove(\@ids);\n        delete \$values->{\$key} if \$set->size == 0;\n    }\n}\n\nsub insert_entry {\n    my ( \$self, \$id, \@keys ) = \@_;\n\n    my \$values  = \$self->values;\n    my \$objects = \$self->objects;\n\n    \$self->remove_ids(\$id);\n\n    my \$set = \$objects->{ref(\$id) ? refaddr(\$id) : \$id} = Set::Object->new;\n\n    \$set->insert(\@keys);\n\n    foreach my \$id_set (\@{\$values}{\@keys}) {\n        \$id_set ||= Set::Object->new;\n        \$id_set->insert(\$id);\n    }\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Hash - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Hash.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Length.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Length;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Length::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_length {\n    my ( \$self, \@strings ) = \@_;\n    pack(\"(n/a*)*\", \@strings);\n}\n\nsub unpack_length {\n    my ( \$self, \$string ) = \@_;\n    unpack(\"(n/a*)*\", \$string);\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Length - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n\tuse Search::GIN::Driver::PackLength;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Length.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Values.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Values;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Values::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_values unpack_values);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Values - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Values.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::UUID;\nBEGIN {\n  \$Search::GIN::Driver::Pack::UUID::VERSION = '0.05';\n}\n# ABSTRACT: UUID key packing\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nwith qw(Search::GIN::Driver);\n\nsub unpack_ids {\n    my ( \$self, \$str ) = \@_;\n    unpack(\"(a16)*\", \$str);\n}\n\nsub pack_ids {\n    my ( \$self, \@ids ) = \@_;\n    pack(\"(a16)*\", \@ids); # FIXME enforce size\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::UUID - UUID key packing\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 SYNOPSIS\n\n    use Search::GIN::Driver::PackUUID;\n\n=head1 DESCRIPTION\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/UUID.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::Delim;\nBEGIN {\n  \$Search::GIN::Driver::Pack::Delim::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => [qw(meta)];\n\nsub pack_delim {\n    my ( \$self, \@strings ) = \@_;\n    join(\"\\0\", \@strings );\n}\n\nsub unpack_delim {\n    my ( \$self, \$string ) = \@_;\n    split(\"\\0\", \$string );\n}\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::Delim - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/Delim.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               _original_name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                               added_by => "\@Basic/GatherDir (Dist::Zilla::Plugin::GatherDir line 67)",
                               content => "use strict;\nuse warnings;\npackage Search::GIN::Driver::Pack::IDs;\nBEGIN {\n  \$Search::GIN::Driver::Pack::IDs::VERSION = '0.05';\n}\n# ABSTRACT:\n\nuse Moose::Role;\n\nuse namespace::clean -except => 'meta';\n\nrequires qw(pack_ids unpack_ids);\n\n1;\n\n\n\n=pod\n\n=head1 NAME\n\nSearch::GIN::Driver::Pack::IDs - use Moose::Role;\n\n=head1 VERSION\n\nversion 0.05\n\n=head1 AUTHOR\n\n  Yuval Kogman <nothingmuch\@cpan.org>\n\n=head1 COPYRIGHT AND LICENSE\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n=cut\n\n\n__END__\n",
                               mode => 420,
                               name => "lib/Search/GIN/Driver/Pack/IDs.pm",
                             }, "Dist::Zilla::File::OnDisk"),
                             bless({
                               added_by => "\@Basic/MetaYAML (Dist::Zilla::Plugin::MetaYAML line 56)",
                               code => sub { ... },
                               mode => 420,
                               name => "META.yml",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "\@Basic/License (Dist::Zilla::Plugin::License line 20)",
                               content => "This software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\nTerms of the Perl programming language system itself\n\na) the GNU General Public License as published by the Free\n   Software Foundation; either version 1, or (at your option) any\n   later version, or\nb) the \"Artistic License\"\n\n--- The GNU General Public License, Version 1, February 1989 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The GNU General Public License, Version 1, February 1989\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t     Version 1, February 1989\n\n Copyright (C) 1989 Free Software Foundation, Inc.\n                59 Temple Place, Suite 330, Boston, MA 02111-1307, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The license agreements of most software companies try to keep users\nat the mercy of those companies.  By contrast, our General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  The\nGeneral Public License applies to the Free Software Foundation's\nsoftware and to any other program whose authors commit to using it.\nYou can use it for your programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Specifically, the General Public License is designed to make\nsure that you have the freedom to give away or sell copies of free\nsoftware, that you receive source code or can get it if you want it,\nthat you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of a such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must tell them their rights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any program or other work which\ncontains a notice placed by the copyright holder saying it may be\ndistributed under the terms of this General Public License.  The\n\"Program\", below, refers to any such program or work, and a \"work based\non the Program\" means either the Program or any work containing the\nProgram or a portion of it, either verbatim or with modifications.  Each\nlicensee is addressed as \"you\".\n\n  1. You may copy and distribute verbatim copies of the Program's source\ncode as you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this\nGeneral Public License and to the absence of any warranty; and give any\nother recipients of the Program a copy of this General Public License\nalong with the Program.  You may charge a fee for the physical act of\ntransferring a copy.\n\n  2. You may modify your copy or copies of the Program or any portion of\nit, and copy and distribute such modifications under the terms of Paragraph\n1 above, provided that you also do the following:\n\n    a) cause the modified files to carry prominent notices stating that\n    you changed the files and the date of any change; and\n\n    b) cause the whole of any work that you distribute or publish, that\n    in whole or in part contains the Program or any part thereof, either\n    with or without modifications, to be licensed at no charge to all\n    third parties under the terms of this General Public License (except\n    that you may choose to grant warranty protection to some or all\n    third parties, at your option).\n\n    c) If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use\n    in the simplest and most usual way, to print or display an\n    announcement including an appropriate copyright notice and a notice\n    that there is no warranty (or else, saying that you provide a\n    warranty) and that users may redistribute the program under these\n    conditions, and telling the user how to view a copy of this General\n    Public License.\n\n    d) You may charge a fee for the physical act of transferring a\n    copy, and you may at your option offer warranty protection in\n    exchange for a fee.\n\nMere aggregation of another independent work with the Program (or its\nderivative) on a volume of a storage or distribution medium does not bring\nthe other work under the scope of these terms.\n\n  3. You may copy and distribute the Program (or a portion or derivative of\nit, under Paragraph 2) in object code or executable form under the terms of\nParagraphs 1 and 2 above provided that you also do one of the following:\n\n    a) accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    b) accompany it with a written offer, valid for at least three\n    years, to give any third party free (except for a nominal charge\n    for the cost of distribution) a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of\n    Paragraphs 1 and 2 above; or,\n\n    c) accompany it with the information you received as to where the\n    corresponding source code may be obtained.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form alone.)\n\nSource code for a work means the preferred form of the work for making\nmodifications to it.  For an executable file, complete source code means\nall the source code for all modules it contains; but, as a special\nexception, it need not include source code for modules which are standard\nlibraries that accompany the operating system on which the executable\nfile runs, or for standard header files or definitions files that\naccompany that operating system.\n\n  4. You may not copy, modify, sublicense, distribute or transfer the\nProgram except as expressly provided under this General Public License.\nAny attempt otherwise to copy, modify, sublicense, distribute or transfer\nthe Program is void, and will automatically terminate your rights to use\nthe Program under this License.  However, parties who have received\ncopies, or rights to use copies, from you under this General Public\nLicense will not have their licenses terminated so long as such parties\nremain in full compliance.\n\n  5. By copying, distributing or modifying the Program (or any work based\non the Program) you indicate your acceptance of this license to do so,\nand all its terms and conditions.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these\nterms and conditions.  You may not impose any further restrictions on the\nrecipients' exercise of the rights granted herein.\n\n  7. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of the license which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthe license, you may choose any version ever published by the Free Software\nFoundation.\n\n  8. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\tAppendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to humanity, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest to\nattach them to the start of each source file to most effectively convey\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 1, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19xx name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, the\ncommands you use may be called something other than `show w' and `show\nc'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  program `Gnomovision' (a program to direct compilers to make passes\n  at assemblers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n\n--- The Artistic License 1.0 ---\n\nThis software is Copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software, licensed under:\n\n  The Artistic License 1.0\n\nThe Artistic License\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package\nmay be copied, such that the Copyright Holder maintains some semblance of\nartistic control over the development of the package, while giving the users of\nthe package the right to use and distribute the Package in a more-or-less\ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\n  - \"Package\" refers to the collection of files distributed by the Copyright\n    Holder, and derivatives of that collection of files created through\n    textual modification. \n  - \"Standard Version\" refers to such a Package if it has not been modified,\n    or has been modified in accordance with the wishes of the Copyright\n    Holder. \n  - \"Copyright Holder\" is whoever is named in the copyright or copyrights for\n    the package. \n  - \"You\" is you, if you're thinking about copying or distributing this Package.\n  - \"Reasonable copying fee\" is whatever you can justify on the basis of media\n    cost, duplication charges, time of people involved, and so on. (You will\n    not be required to justify it to the Copyright Holder, but only to the\n    computing community at large as a market that must bear the fee.) \n  - \"Freely Available\" means that no fee is charged for the item itself, though\n    there may be fees involved in handling the item. It also means that\n    recipients of the item may redistribute it under the same conditions they\n    received it. \n\n1. You may make and give away verbatim copies of the source form of the\nStandard Version of this Package without restriction, provided that you\nduplicate all of the original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived\nfrom the Public Domain or from the Copyright Holder. A Package modified in such\na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that\nyou insert a prominent notice in each changed file stating how and when you\nchanged that file, and provided that you do at least ONE of the following:\n\n  a) place your modifications in the Public Domain or otherwise make them\n     Freely Available, such as by posting said modifications to Usenet or an\n     equivalent medium, or placing the modifications on a major archive site\n     such as ftp.uu.net, or by allowing the Copyright Holder to include your\n     modifications in the Standard Version of the Package.\n\n  b) use the modified Package only within your corporation or organization.\n\n  c) rename any non-standard executables so the names do not conflict with\n     standard executables, which must also be provided, and provide a separate\n     manual page for each non-standard executable that clearly documents how it\n     differs from the Standard Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable\nform, provided that you do at least ONE of the following:\n\n  a) distribute a Standard Version of the executables and library files,\n     together with instructions (in the manual page or equivalent) on where to\n     get the Standard Version.\n\n  b) accompany the distribution with the machine-readable source of the Package\n     with your modifications.\n\n  c) accompany any non-standard executables with their corresponding Standard\n     Version executables, giving the non-standard executables non-standard\n     names, and clearly documenting the differences in manual pages (or\n     equivalent), together with instructions on where to get the Standard\n     Version.\n\n  d) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this\nPackage.  You may charge any fee you choose for support of this Package. You\nmay not charge a fee for this Package itself. However, you may distribute this\nPackage in aggregate with other (possibly commercial) programs as part of a\nlarger (possibly commercial) software distribution provided that you do not\nadvertise this Package as a product of your own.\n\n6. The scripts and library files supplied as input to or produced as output\nfrom the programs of this Package do not automatically fall under the copyright\nof this Package, but belong to whomever generated them, and may be sold\ncommercially, and may be aggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not\nbe considered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote\nproducts derived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\nThe End\n\n",
                               mode => 420,
                               name => "LICENSE",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Readme (Dist::Zilla::Plugin::Readme line 38)",
                               content => "\n\nThis archive contains the distribution Search-GIN,\nversion 0.05:\n\n  Generalized Inverted Indexing\n\nThis software is copyright (c) 2010 by Yuval Kogman, Infinity Interactive.\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n\n",
                               mode => 420,
                               name => "README",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "\@Basic/Manifest (Dist::Zilla::Plugin::Manifest line 35)",
                               code => sub { ... },
                               mode => 420,
                               name => "MANIFEST",
                             }, "Dist::Zilla::File::FromCode"),
                             bless({
                               added_by => "PodSyntaxTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nBEGIN {\n  unless (\$ENV{RELEASE_TESTING}) {\n    require Test::More;\n    Test::More::plan(skip_all => 'these tests are for release candidate testing');\n  }\n}\n\nuse Test::More;\n\neval \"use Test::Pod 1.41\";\nplan skip_all => \"Test::Pod 1.41 required for testing POD\" if \$\@;\n\nall_pod_files_ok();\n",
                               mode => 420,
                               name => "t/release-pod-syntax.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "CompileTests (Dist::Zilla::Plugin::InlineFiles line 24)",
                               content => "#!perl\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse File::Find;\nuse File::Temp qw{ tempdir };\n\nmy \@modules;\nfind(\n  sub {\n    return if \$File::Find::name !~ /\\.pm\\z/;\n    my \$found = \$File::Find::name;\n    \$found =~ s{^lib/}{};\n    \$found =~ s{[/\\\\]}{::}g;\n    \$found =~ s/\\.pm\$//;\n    # nothing to skip\n    push \@modules, \$found;\n  },\n  'lib',\n);\n\nmy \@scripts = glob \"bin/*\";\n\nplan tests => scalar(\@modules) + scalar(\@scripts);\n\n{\n    # fake home for cpan-testers\n    # no fake requested ## local \$ENV{HOME} = tempdir( CLEANUP => 1 );\n\n    like( qx{ \$^X -Ilib -e \"use \$_; print '\$_ ok'\" }, qr/^\\s*\$_ ok/s, \"\$_ loaded ok\" )\n        for sort \@modules;\n\n    SKIP: {\n        eval \"use Test::Script 1.05; 1;\";\n        skip \"Test::Script needed to test script compilation\", scalar(\@scripts) if \$\@;\n        foreach my \$file ( \@scripts ) {\n            my \$script = \$file;\n            \$script =~ s!.*/!!;\n            script_compiles( \$file, \"\$script script compiles\" );\n        }\n    }\n}\n",
                               mode => 420,
                               name => "t/00-compile.t",
                             }, "Dist::Zilla::File::InMemory"),
                             bless({
                               added_by => "Signature (Dist::Zilla::Plugin::Signature line 52)",
                               content => "",
                               mode => 420,
                               name => "SIGNATURE",
                             }, "Dist::Zilla::File::InMemory"),
                           ],
      is_trial          => 0,
      license           => bless({
                             _gpl   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::GPL_1"),
                             _tal   => bless({ holder => "Yuval Kogman, Infinity Interactive", year => 2010 }, "Software::License::Artistic_1_0"),
                             holder => "Yuval Kogman, Infinity Interactive",
                             year   => 2010,
                           }, "Software::License::Perl_5"),
      logger            => bless({ debug => 0, logger => 'fix', parent => 'fix', proxy_prefix => "[DZ] " }, "Log::Dispatchouli::Proxy"),
      main_module       => 'fix',
      name              => "Search-GIN",
      plugins           => [
                             bless({
                               include_dotfiles => 0,
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/GatherDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/GatherDir",
                               prefix => "",
                               root => bless({ dirs => ["."], file_spec_class => undef, volume => "" }, "Path::Class::Dir"),
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::GatherDir"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/PruneCruft] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/PruneCruft",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PruneCruft"),
                             bless({
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/ManifestSkip] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ManifestSkip",
                               skipfile    => "MANIFEST.SKIP",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::ManifestSkip"),
                             bless({
                               filename    => "META.yml",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[\@Basic/MetaYAML] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/MetaYAML",
                               version     => "1.4",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::MetaYAML"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/License] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/License",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::License"),
                             bless({
                               delim => ["{{", "}}"],
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Readme] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Readme",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Readme"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExtraTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExtraTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExtraTests"),
                             bless({
                               dir => "bin",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ExecDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ExecDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ExecDir"),
                             bless({
                               dir => "share",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ShareDir] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ShareDir",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ShareDir"),
                             bless({
                               eumm_version => "6.31",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/MakeMaker] ",
                               }, "Log::Dispatchouli::Proxy"),
                               make_path => "make",
                               plugin_name => "\@Basic/MakeMaker",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::MakeMaker"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/Manifest] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/Manifest",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Manifest"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/TestRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/TestRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::TestRelease"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/ConfirmRelease] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/ConfirmRelease",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ConfirmRelease"),
                             bless({
                               credentials_stash => "%PAUSE",
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[\@Basic/UploadToCPAN] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "\@Basic/UploadToCPAN",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::UploadToCPAN"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[PodSyntaxTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodSyntaxTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::PodSyntaxTests"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PodWeaver] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PodWeaver",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PodWeaver"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[ReadmeFromPod] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "ReadmeFromPod",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::ReadmeFromPod"),
                             bless({
                               filename    => "",
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[CheckChangeLog] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CheckChangeLog",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::CheckChangeLog"),
                             bless({
                               finder      => [":InstallModules", ":ExecFiles"],
                               logger      => bless({
                                                debug => undef,
                                                logger => 'fix',
                                                parent => 'fix',
                                                proxy_prefix => "[PkgVersion] ",
                                              }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "PkgVersion",
                               zilla       => 'fix',
                             }, "Dist::Zilla::Plugin::PkgVersion"),
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[CompileTests] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "CompileTests",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::CompileTests"),
                             'fix',
                             bless({
                               logger => bless({
                                 debug => undef,
                                 logger => 'fix',
                                 parent => 'fix',
                                 proxy_prefix => "[Signature] ",
                               }, "Log::Dispatchouli::Proxy"),
                               plugin_name => "Signature",
                               sign => "archive",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::Signature"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":InstallModules",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":TestFiles",
                               style => "grep",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ExecFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                             bless({
                               code => sub { ... },
                               plugin_name => ":ShareFiles",
                               style => "list",
                               zilla => 'fix',
                             }, "Dist::Zilla::Plugin::FinderCode"),
                           ],
      prereqs           => bless({
                             cpan_meta_prereqs => bless({
                               prereqs => {
                                 configure => {
                                                requires => bless({
                                                  requirements => {
                                                    "ExtUtils::MakeMaker" => bless({
                                                      minimum => bless({ original => "6.31", version => [6, 310] }, "version"),
                                                    }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                                 runtime   => {
                                                requires => bless({
                                                  requirements => {
                                                    "Carp"                     => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Data::Stream::Bulk::Util" => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose"                    => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Moose::Role"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "MRO::Compat"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "namespace::clean"         => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scalar::Util"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Scope::Guard"             => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Set::Object"              => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                    "Test::Deep::NoTest"       => bless({ minimum => bless({ original => 0, version => [0] }, "version") }, "Version::Requirements::_Range::Range"),
                                                  },
                                                }, "Version::Requirements"),
                                              },
                               },
                             }, "CPAN::Meta::Prereqs"),
                           }, "Dist::Zilla::Prereqs"),
      root              => 'fix',
      version           => "0.05",
    }, "Dist::Zilla::Dist::Builder"),
  }, "Dist::Zilla::Plugin::AutoPrereq");
  $a->{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{chrome}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{main_module} = $a->{zilla}{files}[8];
  $a->{zilla}{plugins}[0]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[0]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[1]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[1]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[2]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[2]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[3]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[3]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[4]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[4]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[5]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[5]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[6]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[6]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[7]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[7]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[8]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[8]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[9]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[9]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[10]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[10]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[11]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[11]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[12]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[12]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[13]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[13]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[14]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[14]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[15]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[15]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[16]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[16]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[17]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[17]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[18]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[18]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[19]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[19]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[20] = $a;
  $a->{zilla}{plugins}[21]{logger}{logger} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{logger}{parent} = $a->{logger}{logger};
  $a->{zilla}{plugins}[21]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[22]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[23]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[24]{zilla} = $a->{zilla};
  $a->{zilla}{plugins}[25]{zilla} = $a->{zilla};
  $a->{zilla}{root} = $a->{zilla}{plugins}[0]{root};
  $a;
}
